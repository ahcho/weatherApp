{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/getWeatherData.js","webpack:///./src/index.js","webpack:///./src/rain.js","webpack:///./src/sun.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACF;;AAET;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qEAAqE,OAAO;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA,6C;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA,+BAA+B,aAAa;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,aAAa;AACrD;AACA;AACA,sB;AACA,2B;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,0B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,6CAAI;AACpC;AACA,0B;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,2B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,S;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzNA;AAAA;AAAsC;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uEAAuE,IAAI,OAAO,IAAI,wBAAwB,mCAAmC;AACjJ,wBAAwB,uDAAO;AAC/B;AACA;;AAEA;;AAEA;AACA,4BAA4B,SAAS,KAAK,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uDAAO;AAC/B;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;AAID;;;AAGA;;;AAGA;;;AAGA,qE;;AAEA;AACA;AACA,kFAAkF,IAAI,OAAO,IAAI,wBAAwB,mCAAmC;;AAE5J;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA,IAAI;;;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;;;;;;;;;;;;ACxEA;AAAA;AAAA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpGA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;;;AAIA;;AAEA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,a","file":"./dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import Rain from './rain';\nimport Sun from './sun';\n\nexport default class Weather {\n    constructor(api, c, canvas) {\n        this.c = c;\n        this.canvas = canvas;\n        this.api = api;\n        this.temperatureDegree = document.querySelector(\".temp-degree\");\n        this.temperatureDescription = document.querySelector(\".temp-description\");\n        this.locationTimezone = document.querySelector(\".location-timezone\");\n        this.degreeSection = document.querySelector('.weather-info-bottom');\n        this.degreeSpan = document.querySelector('.weather-info-bottom span');\n        this.iconSection = document.getElementById('temp-icon');\n        this.stars = [];\n        this.rains =[];\n        this.ticker = 0;\n    }\n\n    getData() {\n        fetch(this.api)\n            .then(res => {\n                return res.json()\n            })\n            .then(data => {\n                const description = data.weather[0].description\n                const temperature = Math.floor(data.main.temp)\n                const location = data.name\n                const iconId = data.weather[0].icon\n                const iconAdd = `https://openweathermap.org/img/wn/${iconId}@2x.png`\n\n                //Set DOM Elements from the API\n                this.temperatureDegree.textContent = temperature;\n                this.temperatureDescription.textContent = description;\n                this.locationTimezone.textContent = location;\n                this.iconSection.src = iconAdd;\n                this.changeMetric(temperature);\n                this.renderAnimation(iconId);             \n            })\n    }\n\n    changeMetric(temperature) {\n        let celsius = (temperature - 32) * (5 / 9);\n        this.degreeSection.addEventListener('click', () => {\n            if (this.degreeSpan.textContent === '°F') {\n                this.degreeSpan.textContent = '°C'\n                this.temperatureDegree.textContent = Math.floor(celsius);\n            } else {\n                this.degreeSpan.textContent = '°F'\n                this.temperatureDegree.textContent = temperature;\n            }\n        })\n    }\n\n    renderCanvasBackground() {\n        const today = new Date();\n        const time = today.getHours();\n        this.hour = today.getHours();\n        this.minutes = today.getMinutes();\n        this.midDay = 'AM';\n        if (this.hour > 12) {\n            this.midDay = 'PM'\n            this.hour -= 12;\n        }\n        if (this.hour < 10) {\n            this.hour = `0${this.hour}`\n        }\n        if (this.minutes < 10) {\n            this.minutes = `0${this.minutes}`\n        }\n\n        this.c.beginPath();\n        if (time > 7 && time < 18) {\n            const backgroundGradient = this.c.createLinearGradient(0, 0, 500, 600)\n            backgroundGradient.addColorStop(1, '#B7F8DB')\n            backgroundGradient.addColorStop(0, '#50A7C2')\n            this.c.fillStyle = backgroundGradient;\n            this.c.fillRect(0, 0, 500, 600)\n        } else {\n            const backgroundGradient = this.c.createLinearGradient(0, 0, 500, 600)\n            backgroundGradient.addColorStop(0, '#171e26')\n            backgroundGradient.addColorStop(1, '#3f586b')\n            this.c.fillStyle = backgroundGradient;\n            this.c.fillRect(0, 0, 500, 600)\n        }\n         \n    }\n\n    renderTime() {\n        this.c.beginPath()\n        this.c.font = '50px Cinzel'\n        this.c.fillStyle = '#555555';\n        this.c.fillText(`${this.hour}:${this.minutes}`, 190, 60);\n        this.c.font = '20px Cinzel'\n        this.c.fillText(this.midDay, 310, 40)\n        this.c.fill();   \n        this.c.closePath();   \n    }\n\n    renderAnimation(iconId) {\n        const sun = ['01d', '02d', '03d']\n        const rain = ['04d', '09d', '10d', '11d']\n        const snow = ['13d', '50d']\n        \n            \n        if (sun.includes(iconId)) {\n            this.renderSun();\n        } else if (rain.includes(iconId)) {\n            this.animateRain();\n        } else {\n            this.animateRain();\n            //console.log('call snowy animation')\n        }\n        this.renderTime();  \n    }\n\n    animateRain() {\n        requestAnimationFrame(this.animateRain.bind(this))\n    \n        this.renderCanvasBackground();\n        this.rains.forEach((rain) => {\n            rain.update();\n            rain.miniRains.forEach((miniRain, index) => {\n                miniRain.update();\n                if (miniRain.ttl === 0) {\n                    rain.miniRains.splice(index, 1)// get rid of mini rain\n                }\n            })\n\n        });\n        //draw a cloud\n        this.renderCloud()\n        // add a radial gradient\n        var grdCenterX = 260;\n        var grdCenterY = 80;\n        var grd = this.c.createRadialGradient(grdCenterX, grdCenterY, 10, grdCenterX, grdCenterY, 200);\n        grd.addColorStop(0, \"white\"); // light blue\n        grd.addColorStop(1, \"white\"); // dark blue\n        this.c.fillStyle = grd;\n        this.c.fill();\n        this.c.lineWidth = 5;\n        this.c.strokeStyle = \"white\";\n        this.c.stroke();\n        this.ticker++;\n\n        if (this.ticker % 40 === 0) {\n            const x = Math.random() * (400 - 100) + 100;\n            const y = 150;\n            const w = Math.random() * 5;\n            this.rains.push(new Rain(x, y, w, \"blue\", this.c, this.canvas))\n        }\n        this.renderTime();  \n    }\n\n    render() {\n        this.getData().then(res => {\n            return res.json()\n        })\n            .then(data => {    \n                const description = data.weather[0].description\n                const temperature = data.main.temp\n                const location = data.name\n                //Set DOM Elements frm the API\n                this.temperatureDegree.textContent = temperature;\n                this.temperatureDescription.textContect = description;\n                this.locationTimezone.textContent = location;\n            })\n    }\n\n    renderSun() {\n        this.degree = 0;\n        this.x = 250;\n        this.y = 250;\n        this.radius = 50;\n        this.sAngle = 0;\n        this.eAngle = Math.PI * 2;\n        this.len = 30;\n\n        this.c.beginPath();\n        this.c.arc(this.x, this.y, this.radius, this.sAngle, this.eAngle, false);\n        this.c.fillStyle = '#FDB813';\n        this.c.fill();\n\n        for (let i = 0; i < 8; i++) {\n            this.c.beginPath();\n            this.c.lineCap = 'round';\n            const x = 250 + Math.cos(Math.PI * this.degree / 180) * 65;\n            const y = 250 - Math.sin(Math.PI * this.degree / 180) * 65;\n            this.c.moveTo(x, y);\n            this.c.lineTo(x + (this.len * Math.cos(Math.PI * this.degree / 180)),\n                y - (this.len * Math.sin(Math.PI * this.degree / 180)));\n\n            this.c.lineWidth = 9;\n            this.c.strokeStyle = '#FDB813';\n            this.c.stroke();\n            this.degree += 45;\n        }   \n        this.c.closePath();\n    }\n\n    renderCloud() {\n        const startX = 100;\n        const startY = 100;\n        this.c.beginPath()\n        this.c.moveTo(startX, startY);\n        this.c.bezierCurveTo(startX - 40, startY + 20, startX - 40, startY + 70, startX + 60, startY + 70);\n        this.c.bezierCurveTo(startX + 80, startY + 100, startX + 150, startY + 100, startX + 170, startY + 70);\n        this.c.bezierCurveTo(startX + 300, startY + 70, startX + 300, startY + 40, startX + 250, startY + 20);\n        this.c.bezierCurveTo(startX + 260, startY - 40, startX + 200, startY - 50, startX + 170, startY - 30);\n        this.c.bezierCurveTo(startX + 150, startY - 75, startX + 80, startY - 60, startX + 80, startY - 30);\n        this.c.bezierCurveTo(startX + 30, startY - 75, startX - 20, startY - 60, startX, startY);\n        this.c.closePath();\n    }\n\n    sunAnimate() {\n        requestAnimationFrame(this.sunAnimate)\n    }\n}\n\n\n\n\n","import Weather from './getWeatherData'\n\nfunction success(position){\n    const canvas = document.querySelector('canvas')\n    const c = canvas.getContext('2d')\n    canvas.width = 500\n    canvas.height = 500\n\n    const lon = position.coords.longitude;\n    const lat = position.coords.latitude;\n    const api = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${\"867ade8c61095ff3201107594fa6ff3e\"}`\n    const weather = new Weather(api, c, canvas);\n    weather.getData();\n    weather.renderCanvasBackground();\n\n}\n\nfunction error(err) {\n    //console.warn(`ERROR(${err.code}): ${err.message}`);\n    // later will get zipcode from user, currently just showing default location\n    // (standford) weather \n    const canvas = document.querySelector('canvas')\n    const c = canvas.getContext('2d')\n    canvas.width = 500\n    canvas.height = 600\n    const api = \"https://api.openweathermap.org/data/2.5/weather?lat=37.4079488&lon=-122.13944319999999&units=imperial&appid=867ade8c61095ff3201107594fa6ff3e\"\n\n    const weather = new Weather(api, c, canvas);\n    weather.getData();\n    weather.renderCanvasBackground();\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    navigator.geolocation.getCurrentPosition(success, error);\n});\n\n\n\n// import Weather from './getWeatherData'\n\n\n// document.addEventListener(\"DOMContentLoaded\", function() {\n  \n    \n//     if(navigator.geolocation) {\n       \n        \n//             navigator.geolocation.getCurrentPosition(position => { \n             \n//             const lon = position.coords.longitude;\n//             const lat = position.coords.latitude;\n//             const api = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid=${\"867ade8c61095ff3201107594fa6ff3e\"}`           \n            \n//             const weather = new Weather(api);\n//             weather.getData();\n//      })} else {\n//         const weather = new Weather();\n//         weather.getData();\n//     }\n// });\n\n\n\n// constructor(zipcode) {\n//     this.zipcode = zipcode;\n//     this.ADDRESS = \"https://api.openweathermap.org/data/2.5/weather?zip=\";\n//     this.COUNTRY = \",us\";\n//     this.CONVERT = \"&units=imperial\";\n//     this.MYKEY = \"&APPID=867ade8c61095ff3201107594fa6ff3e\";\n//     this.temperatureDegree = document.querySelector(\".temp-degree\");\n//     this.temperatureDescription = document.querySelector(\".temp-description\");\n//     this.locationTimezone = document.querySelector(\".location-timezone\");\n// }","function randomIntFromRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport default class Rain {\n    constructor(x, y, width, color, c, canvas) {\n        this.x = x\n        this.y = y\n        this.color = color\n        this.velocity = {\n            x: 0,\n            y: 1\n        }\n        this.friction = 0.8\n        this.gravity = 0.05\n        this.opacity = 1\n        this.lineWidth = width\n        this.miniRains = []\n        this.c = c\n        this.canvas = canvas\n    }\n\n    // how rain will look like\n    draw() {\n        this.c.save()\n        this.c.beginPath()\n        this.c.moveTo(this.x, 10 + this.y);\n        this.c.lineTo(this.x, 30 + this.y);\n        this.c.lineWidth = this.lineWidth;\n        this.c.strokeStyle = 'white';\n        this.c.stroke();\n        this.c.closePath()\n        this.c.restore()\n    }\n\n    // call draw function\n    update() {\n        this.draw()\n        //when rain hits bottom of screen\n        if (this.y + this.velocity.y + 20 > this.canvas.height) {\n            this.shatter();\n        } else {\n            this.velocity.y += this.gravity;\n        }\n        this.y += this.velocity.y;\n    }\n\n    shatter() {\n        const num = randomIntFromRange(1, 3)\n        const radius = randomIntFromRange(1, 2)\n        for (let i = 0; i < num; i++) {\n            this.miniRains.push(new MiniRain(this.x, this.y, radius, this.c, this.canvas))\n        }\n    }\n}\n\nclass MiniRain {\n    constructor(x, y, radius, c, canvas) {\n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.color = 'white'\n        this.velocity = {\n            x: randomIntFromRange(-5, 5),\n            y: randomIntFromRange(-15, 15)\n        }\n        this.friction = 0.2\n        this.gravity = 0.05\n        this.ttl = 50 // they live 50 frames\n        this.opacity = 1\n        this.c = c\n        this.canvas = canvas\n    }\n\n    draw() {\n        this.c.save()\n        this.c.beginPath()\n        this.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n        this.c.fillStyle = `rgba(227, 234, 239, ${this.opacity})`\n        this.c.shadowColor = 'white'\n        this.c.shadowBlur = 20\n        this.c.fill()\n        this.c.closePath()\n        this.c.restore()\n    }\n\n    update() {\n        this.draw()\n        // when ball hits bottom of screen\n        if (this.y + this.radius + this.velocity.y > this.canvas.height) {\n            this.velocity.y = -this.velocity.y * this.friction;\n        } else {\n            this.velocity.y += this.gravity;\n        }\n\n        this.x += this.velocity.x;\n        this.y += this.velocity.y;\n        this.ttl -= 1\n        this.opacity -= 1 / this.ttl\n    }\n}\n","// addEventListener('click', (event) => {\n//     mouse.x = event.clientX\n//     mouse.y = event.clientY\n// })\n\n// addEventListener('resize', () => {\n//     canvas.width = 500\n//     canvas.height = 600\n\n//     init()\n// })\n\nfunction randomIntFromRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nclass Sun {\n    // constructor(x, y, radius, color) {\n    constructor(c) {\n        this.c = c\n        this.x = 250\n        this.y = 250\n        this.radius = 50\n        this.sAngle = 0\n        this.eAngle = Math.PI * 2\n        this.color = '#FDB813'\n        this.radians = 0;\n        this.velocity = 0.001;// speed of bar\n        this.degree = 0\n        this.len = 30;\n    }\n\n    draw() {\n        //main sun\n        this.c.beginPath();\n        this.c.arc(this.x, this.y, this.radius, this.sAngle, this.eAngle, false);\n        this.c.fillStyle = this.color;\n        this.c.fill();\n\n        for (let i = 0; i < 8; i++) {\n            const len = 30;\n            this.c.beginPath();\n            this.c.lineCap = 'round';\n            const x = 250 + Math.cos(Math.PI * this.degree / 180) * 65;\n            const y = 250- Math.sin(Math.PI * this.degree / 180) * 65;\n            this.c.moveTo(x, y);\n            this.c.lineTo(x + (this.len * Math.cos(Math.PI * this.degree / 180)),\n                y - (this.len * Math.sin(Math.PI * this.degree / 180)));\n\n            this.c.lineWidth = 9;\n            this.c.strokeStyle = '#FDB813';\n            this.c.stroke();\n            this.degree += 45;\n        }   \n    }\n\n    update() {\n        //move points over time\n        this.radians += this.velocity;\n        this.x = this.x + Math.cos(this.radians) //* 100;\n        this.y = this.y + Math.sin(this.radians) //* 100;\n        this.draw()\n    }\n}\n////////////////\nclass Particle {\n    constructor(x, y, radius, color) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.color = color;\n        this.radians = Math.random() * Math.PI * 2;\n        this.velocity = 0.02;// speed of particle\n        this.distanceFromCenter = randomIntFromRange(50, 120)\n    }\n\n    draw(startPoint) {\n\n        c.beginPath()\n        c.strokeStyle = this.color;\n        c.lineWidth = this.radius;\n        c.moveTo(startPoint.x, startPoint.y);\n        c.lineTo(this.x, this.y);\n        c.stroke();\n        // c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\n        // c.fillStyle = this.color\n        // c.fill()\n        c.closePath()\n    }\n\n    update() {\n        const lastPoint = { x: this.x, y: this.y }\n        // move points over time\n        const x = canvas.width / 2;\n        const y = canvas.height / 2;\n        this.radians += this.velocity;\n        this.x = x + Math.cos(this.radians) * this.distanceFromCenter;\n        this.y = y + Math.sin(this.radians) * this.distanceFromCenter;\n        this.draw(lastPoint)\n    }\n}\n//////////////////////\nclass Bar {\n    constructor(x, y, degree) {\n        this.x = 250;\n        this.y = 250;\n        this.len = 30;\n        this.div = 180;\n        const len = 30;\n        this.radians = 0;\n        this.velocity = 0.05;// speed of bar\n        this.degree = degree\n    }\n    \n    draw() {\n        const len = 30;\n        c.beginPath();\n        c.lineCap = 'round';\n        const x = this.x + Math.cos(Math.PI * this.degree / 180) * 65;\n        const y = this.y - Math.sin(Math.PI * this.degree / 180) * 65;\n        c.moveTo(x, y);\n        c.lineTo(x + (this.len * Math.cos(Math.PI * this.degree / 180)),\n            y - (this.len * Math.sin(Math.PI * this.degree / 180)));\n\n        c.lineWidth = 9;\n        c.strokeStyle = '#FDB813';\n        c.stroke();\n    }\n\n    update() {\n        this.radians += this.velocity;\n        this.x = this.x + Math.cos(this.radians) * 30;\n        this.y = this.y + Math.sin(this.radians) * 30;\n        this.draw()\n\n    }\n    \n}\n\nlet particles = [];\nfunction init() {\n    // const backgroundGradient = c.createLinearGradient(0, 0, 0, canvas.height)\n    // backgroundGradient.addColorStop(0, '#171e26')\n    // backgroundGradient.addColorStop(1, '#3f586b')\n    const sun = new Sun();\n    sun.update();\n\n\n    particles = [];\n    const colors = [\"#FCB033\", \"#FFE469\", \"#FECC51\", \"#FA8607\", \"#FA961B\"]\n    for (let i = 0; i < 200; i++) {\n        const rand = Math.floor(Math.random() * colors.length)\n        const radius = Math.ceil(Math.random() * 2);\n        particles.push(new Particle(canvas.width / 2, canvas.height / 2, radius, colors[rand]))\n    }\n}\n\n\nfunction animate() {\n    requestAnimationFrame(animate)\n    // const backgroundGradient = c.createLinearGradient(0, 0, 0, canvas.height)\n    // backgroundGradient.addColorStop(0, '#171e26')\n    // backgroundGradient.addColorStop(1, '#3f586b')\n    c.clearRect(0, 0, canvas.width, canvas.height)\n    // c.fillStyle = backgroundGradient;\n    // c.fillRect(0, 0, canvas.width, canvas.height)\n    // bars.forEach(bar => {\n    //     bar.update()\n    // })\n    const sun = new Sun();\n    sun.update()\n  \n}\n\n// init()\n// animate()\n\n\n// const canvas = document.querySelector('canvas')\n// const c = canvas.getContext('2d')\n\n// canvas.width = 500\n// canvas.height = 600\n\n\n\n// addEventListener('click', (event) => {\n\n// })\n\n// const backgroundGradient = c.createLinearGradient(0, 0, 0, canvas.height)\n// backgroundGradient.addColorStop(0, '#171e26')\n// backgroundGradient.addColorStop(1, '#3f586b')\n// function animate() {\n//     let degree = 0;\n//     requestAnimationFrame(animate)\n//     c.fillStyle = backgroundGradient;\n//     c.fillRect(0, 0, canvas.width, canvas.height)\n//     c.beginPath();\n//     c.arc(250, 250, 50, 0, Math.PI * 2, false);\n//     c.fillStyle = '#FDB813';\n//     c.fill();\n\n//     for (let i = 0; i < 8; i++) {\n//         const len = 30;\n//         c.beginPath();\n//         c.lineCap = 'round';\n//         x = 250 + Math.cos(Math.PI * degree / 180) * 65;\n//         y = 250 - Math.sin(Math.PI * degree / 180) * 65;\n//         c.moveTo(x, y);\n//         c.lineTo(x + (len * Math.cos(Math.PI * degree / 180)),\n//             y - (len * Math.sin(Math.PI * degree / 180)));\n\n//         c.lineWidth = 9;\n//         c.strokeStyle = '#FDB813';\n//         c.stroke();\n//         degree += 45;\n//     }\n\n// }\n\n// function draw() {\n//     c.beginPath();\n//     c.arc(250, 250, 40, 0, Math.PI * 2, false);\n//     c.strokeStyle = 'green';\n//     c.stroke();\n// }\n\n// animate();"],"sourceRoot":""}